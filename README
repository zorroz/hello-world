* Create a git repo from scratch
1. create the local repo dir
2. git init
3. add files
4. git add <>  # add to staging area
5. git commit -m "Add xxx story"  #
6. git remote add origin https://github.com/try-git/try_git.git
7. git push -u origin master # origin is remote repo, master is local branch name

* Check diff and revert
1. git pull origin master
2. git diff HEAD
3. git diff --stage
4. git reset <file>  # remove file from stage
5. git checkout -- <file> # revert back <file>

* Pull and merge changes
1. git branch <name>   # create local branch only
2. git rm <> # remove from stage and os
3. git commit -m ""
4. git checkout master
5. git merge clean_up  # no confliction prompt???  local merge??
6. git branch -d clean_up  # local brach delete??
7. git push

* Solve confliction while merge
1. line confliction
2. file delete confliction


git clone <git repo>
git checkout <branch>  # existing branch
git checkout -b <new_branch>  # create a new branch
test merge


1. working directory, staging area, .git directory(local repo), remote
    - working directory: single checkout of one version of the project. pulled out of the compressed db in .git dir and placed on disk for you to use or modify.
    - staging area: A FILE("index") in .git dir, stores information about what will go into your next commit. 
    - .git directory: stores all meta data and object database for your project, what you copied when clone
        + all version of project?
        +
    - remote: 

2. checkout, add, commit
    - checkout: checkout file from local .git repo from last commited content
    - add: add precisely this CHANGE CONTENT to the next commit
        + untracked -> tracked/new/staged
        + modified/tracked/unstaged -> modified/tracked/staged
        + mark merge-conflicted files as resolved
    - commit: commit to local repo
3. push: to remote repo?
    - .git local repo -> remote repo
4. merge, pull and pull request?
    - pull: remote repo -> local repo, merge if confliction
        + same branch or can be different branch?
    - pull request: request to merge to base branch, need to review and approve
5. snapshot?

6. HEAD?

7. modify file, add, modify file again, checkout file, what happen?

8. Master, Branch
    - Master: develop in 2test
        - create:
        - 
    - Branch:
        - create:
        - switch: 
            + checkout branch before commit current branch?
        - modify:
        - merge:
        - reset:
        - delete:

9. clone & fork
    - clone: remote repo -> local repo
    - fork: remote repo1 -> remote repo2


Task/Workflow:
1. Create a new branch and modify it and merge it

2. Create a new branch and modify it and reset changes

3. Create a new repo, create files and submit
    1. mkdir(working dir) -> git init(.git local repo) -> create/modify files -> git add (staging) -> git commit (.git local repo) -> git push (remote repo)
    2. git pull(remote -> local repo) -> git checkout(local repo -> working dir)
4. 
